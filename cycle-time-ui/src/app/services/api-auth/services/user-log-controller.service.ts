/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllLogs } from '../fn/user-log-controller/get-all-logs';
import { GetAllLogs$Params } from '../fn/user-log-controller/get-all-logs';
import { getUserLogs } from '../fn/user-log-controller/get-user-logs';
import { GetUserLogs$Params } from '../fn/user-log-controller/get-user-logs';
import { logAction } from '../fn/user-log-controller/log-action';
import { LogAction$Params } from '../fn/user-log-controller/log-action';
import { updateSeen } from '../fn/user-log-controller/update-seen';
import { UpdateSeen$Params } from '../fn/user-log-controller/update-seen';
import { UserLogResponse } from '../models/user-log-response';

@Injectable({ providedIn: 'root' })
export class UserLogControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSeen()` */
  static readonly UpdateSeenPath = '/api/logs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSeen()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSeen$Response(params: UpdateSeen$Params, context?: HttpContext): Observable<StrictHttpResponse<UserLogResponse>> {
    return updateSeen(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSeen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSeen(params: UpdateSeen$Params, context?: HttpContext): Observable<UserLogResponse> {
    return this.updateSeen$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserLogResponse>): UserLogResponse => r.body)
    );
  }

  /** Path part for operation `getUserLogs()` */
  static readonly GetUserLogsPath = '/api/logs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserLogs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserLogs$Response(params: GetUserLogs$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserLogResponse>>> {
    return getUserLogs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserLogs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserLogs(params: GetUserLogs$Params, context?: HttpContext): Observable<Array<UserLogResponse>> {
    return this.getUserLogs$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserLogResponse>>): Array<UserLogResponse> => r.body)
    );
  }

  /** Path part for operation `logAction()` */
  static readonly LogActionPath = '/api/logs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logAction$Response(params: LogAction$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return logAction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  logAction(params: LogAction$Params, context?: HttpContext): Observable<void> {
    return this.logAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllLogs()` */
  static readonly GetAllLogsPath = '/api/logs/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllLogs()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllLogs$Response(params?: GetAllLogs$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserLogResponse>>> {
    return getAllLogs(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllLogs$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllLogs(params?: GetAllLogs$Params, context?: HttpContext): Observable<Array<UserLogResponse>> {
    return this.getAllLogs$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserLogResponse>>): Array<UserLogResponse> => r.body)
    );
  }

}
