/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ask } from '../fn/rag-controller/ask';
import { Ask$Params } from '../fn/rag-controller/ask';
import { askSimple } from '../fn/rag-controller/ask-simple';
import { AskSimple$Params } from '../fn/rag-controller/ask-simple';
import { health } from '../fn/rag-controller/health';
import { Health$Params } from '../fn/rag-controller/health';
import { RagResponse } from '../models/rag-response';
import { reindex } from '../fn/rag-controller/reindex';
import { Reindex$Params } from '../fn/rag-controller/reindex';

@Injectable({ providedIn: 'root' })
export class RagControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `reindex()` */
  static readonly ReindexPath = '/api/rag/reindex';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reindex()` instead.
   *
   * This method doesn't expect any request body.
   */
  reindex$Response(params?: Reindex$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return reindex(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reindex$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reindex(params?: Reindex$Params, context?: HttpContext): Observable<string> {
    return this.reindex$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `ask()` */
  static readonly AskPath = '/api/rag/ask';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ask$Response(params: Ask$Params, context?: HttpContext): Observable<StrictHttpResponse<RagResponse>> {
    return ask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ask(params: Ask$Params, context?: HttpContext): Observable<RagResponse> {
    return this.ask$Response(params, context).pipe(
      map((r: StrictHttpResponse<RagResponse>): RagResponse => r.body)
    );
  }

  /** Path part for operation `askSimple()` */
  static readonly AskSimplePath = '/api/rag/ask-simple';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `askSimple()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  askSimple$Response(params: AskSimple$Params, context?: HttpContext): Observable<StrictHttpResponse<RagResponse>> {
    return askSimple(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `askSimple$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  askSimple(params: AskSimple$Params, context?: HttpContext): Observable<RagResponse> {
    return this.askSimple$Response(params, context).pipe(
      map((r: StrictHttpResponse<RagResponse>): RagResponse => r.body)
    );
  }

  /** Path part for operation `health()` */
  static readonly HealthPath = '/api/rag/health';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `health()` instead.
   *
   * This method doesn't expect any request body.
   */
  health$Response(params?: Health$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    return health(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `health$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  health(params?: Health$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    return this.health$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

}
