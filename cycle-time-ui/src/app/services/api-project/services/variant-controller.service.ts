/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createVariant } from '../fn/variant-controller/create-variant';
import { CreateVariant$Params } from '../fn/variant-controller/create-variant';
import { deleteVariant } from '../fn/variant-controller/delete-variant';
import { DeleteVariant$Params } from '../fn/variant-controller/delete-variant';
import { getAllVariants } from '../fn/variant-controller/get-all-variants';
import { GetAllVariants$Params } from '../fn/variant-controller/get-all-variants';
import { getVariant } from '../fn/variant-controller/get-variant';
import { GetVariant$Params } from '../fn/variant-controller/get-variant';
import { getVariantsByProject } from '../fn/variant-controller/get-variants-by-project';
import { GetVariantsByProject$Params } from '../fn/variant-controller/get-variants-by-project';
import { updateVariant } from '../fn/variant-controller/update-variant';
import { UpdateVariant$Params } from '../fn/variant-controller/update-variant';
import { VariantResponse } from '../models/variant-response';

@Injectable({ providedIn: 'root' })
export class VariantControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getVariant()` */
  static readonly GetVariantPath = '/api/variants/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVariant()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVariant$Response(params: GetVariant$Params, context?: HttpContext): Observable<StrictHttpResponse<VariantResponse>> {
    return getVariant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVariant$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVariant(params: GetVariant$Params, context?: HttpContext): Observable<VariantResponse> {
    return this.getVariant$Response(params, context).pipe(
      map((r: StrictHttpResponse<VariantResponse>): VariantResponse => r.body)
    );
  }

  /** Path part for operation `updateVariant()` */
  static readonly UpdateVariantPath = '/api/variants/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateVariant()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVariant$Response(params: UpdateVariant$Params, context?: HttpContext): Observable<StrictHttpResponse<VariantResponse>> {
    return updateVariant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateVariant$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateVariant(params: UpdateVariant$Params, context?: HttpContext): Observable<VariantResponse> {
    return this.updateVariant$Response(params, context).pipe(
      map((r: StrictHttpResponse<VariantResponse>): VariantResponse => r.body)
    );
  }

  /** Path part for operation `deleteVariant()` */
  static readonly DeleteVariantPath = '/api/variants/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteVariant()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVariant$Response(params: DeleteVariant$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteVariant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteVariant$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteVariant(params: DeleteVariant$Params, context?: HttpContext): Observable<void> {
    return this.deleteVariant$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllVariants()` */
  static readonly GetAllVariantsPath = '/api/variants';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllVariants()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVariants$Response(params?: GetAllVariants$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<VariantResponse>>> {
    return getAllVariants(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllVariants$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllVariants(params?: GetAllVariants$Params, context?: HttpContext): Observable<Array<VariantResponse>> {
    return this.getAllVariants$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<VariantResponse>>): Array<VariantResponse> => r.body)
    );
  }

  /** Path part for operation `createVariant()` */
  static readonly CreateVariantPath = '/api/variants';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createVariant()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVariant$Response(params: CreateVariant$Params, context?: HttpContext): Observable<StrictHttpResponse<VariantResponse>> {
    return createVariant(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createVariant$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createVariant(params: CreateVariant$Params, context?: HttpContext): Observable<VariantResponse> {
    return this.createVariant$Response(params, context).pipe(
      map((r: StrictHttpResponse<VariantResponse>): VariantResponse => r.body)
    );
  }

  /** Path part for operation `getVariantsByProject()` */
  static readonly GetVariantsByProjectPath = '/api/variants/project/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getVariantsByProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVariantsByProject$Response(params: GetVariantsByProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<VariantResponse>>> {
    return getVariantsByProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getVariantsByProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getVariantsByProject(params: GetVariantsByProject$Params, context?: HttpContext): Observable<Array<VariantResponse>> {
    return this.getVariantsByProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<VariantResponse>>): Array<VariantResponse> => r.body)
    );
  }

}
