/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createHistoryLog } from '../fn/history-log-controller/create-history-log';
import { CreateHistoryLog$Params } from '../fn/history-log-controller/create-history-log';
import { getHistoryLog } from '../fn/history-log-controller/get-history-log';
import { GetHistoryLog$Params } from '../fn/history-log-controller/get-history-log';
import { getHistoryLogsByMachine } from '../fn/history-log-controller/get-history-logs-by-machine';
import { GetHistoryLogsByMachine$Params } from '../fn/history-log-controller/get-history-logs-by-machine';
import { HistoryLogResponse } from '../models/history-log-response';

@Injectable({ providedIn: 'root' })
export class HistoryLogControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createHistoryLog()` */
  static readonly CreateHistoryLogPath = '/api/history-logs';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createHistoryLog()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createHistoryLog$Response(params: CreateHistoryLog$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoryLogResponse>> {
    return createHistoryLog(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createHistoryLog$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createHistoryLog(params: CreateHistoryLog$Params, context?: HttpContext): Observable<HistoryLogResponse> {
    return this.createHistoryLog$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoryLogResponse>): HistoryLogResponse => r.body)
    );
  }

  /** Path part for operation `getHistoryLog()` */
  static readonly GetHistoryLogPath = '/api/history-logs/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoryLog()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryLog$Response(params: GetHistoryLog$Params, context?: HttpContext): Observable<StrictHttpResponse<HistoryLogResponse>> {
    return getHistoryLog(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoryLog$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryLog(params: GetHistoryLog$Params, context?: HttpContext): Observable<HistoryLogResponse> {
    return this.getHistoryLog$Response(params, context).pipe(
      map((r: StrictHttpResponse<HistoryLogResponse>): HistoryLogResponse => r.body)
    );
  }

  /** Path part for operation `getHistoryLogsByMachine()` */
  static readonly GetHistoryLogsByMachinePath = '/api/history-logs/machine/{machineId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoryLogsByMachine()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryLogsByMachine$Response(params: GetHistoryLogsByMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HistoryLogResponse>>> {
    return getHistoryLogsByMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoryLogsByMachine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryLogsByMachine(params: GetHistoryLogsByMachine$Params, context?: HttpContext): Observable<Array<HistoryLogResponse>> {
    return this.getHistoryLogsByMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HistoryLogResponse>>): Array<HistoryLogResponse> => r.body)
    );
  }

}
