/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createStep } from '../fn/step-controller/create-step';
import { CreateStep$Params } from '../fn/step-controller/create-step';
import { deleteStep } from '../fn/step-controller/delete-step';
import { DeleteStep$Params } from '../fn/step-controller/delete-step';
import { getStep } from '../fn/step-controller/get-step';
import { GetStep$Params } from '../fn/step-controller/get-step';
import { getStepsByMachine } from '../fn/step-controller/get-steps-by-machine';
import { GetStepsByMachine$Params } from '../fn/step-controller/get-steps-by-machine';
import { StepResponse } from '../models/step-response';
import { updateStep } from '../fn/step-controller/update-step';
import { UpdateStep$Params } from '../fn/step-controller/update-step';

@Injectable({ providedIn: 'root' })
export class StepControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getStep()` */
  static readonly GetStepPath = '/api/steps/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStep()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStep$Response(params: GetStep$Params, context?: HttpContext): Observable<StrictHttpResponse<StepResponse>> {
    return getStep(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStep$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStep(params: GetStep$Params, context?: HttpContext): Observable<StepResponse> {
    return this.getStep$Response(params, context).pipe(
      map((r: StrictHttpResponse<StepResponse>): StepResponse => r.body)
    );
  }

  /** Path part for operation `updateStep()` */
  static readonly UpdateStepPath = '/api/steps/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStep()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStep$Response(params: UpdateStep$Params, context?: HttpContext): Observable<StrictHttpResponse<StepResponse>> {
    return updateStep(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStep$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateStep(params: UpdateStep$Params, context?: HttpContext): Observable<StepResponse> {
    return this.updateStep$Response(params, context).pipe(
      map((r: StrictHttpResponse<StepResponse>): StepResponse => r.body)
    );
  }

  /** Path part for operation `deleteStep()` */
  static readonly DeleteStepPath = '/api/steps/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStep()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStep$Response(params: DeleteStep$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteStep(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStep$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStep(params: DeleteStep$Params, context?: HttpContext): Observable<void> {
    return this.deleteStep$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createStep()` */
  static readonly CreateStepPath = '/api/steps';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStep()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStep$Response(params: CreateStep$Params, context?: HttpContext): Observable<StrictHttpResponse<StepResponse>> {
    return createStep(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStep$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStep(params: CreateStep$Params, context?: HttpContext): Observable<StepResponse> {
    return this.createStep$Response(params, context).pipe(
      map((r: StrictHttpResponse<StepResponse>): StepResponse => r.body)
    );
  }

  /** Path part for operation `getStepsByMachine()` */
  static readonly GetStepsByMachinePath = '/api/steps/machine/{machineId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStepsByMachine()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStepsByMachine$Response(params: GetStepsByMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StepResponse>>> {
    return getStepsByMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStepsByMachine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStepsByMachine(params: GetStepsByMachine$Params, context?: HttpContext): Observable<Array<StepResponse>> {
    return this.getStepsByMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StepResponse>>): Array<StepResponse> => r.body)
    );
  }

}
