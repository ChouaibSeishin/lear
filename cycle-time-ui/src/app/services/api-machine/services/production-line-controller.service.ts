/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProductionLine } from '../fn/production-line-controller/create-production-line';
import { CreateProductionLine$Params } from '../fn/production-line-controller/create-production-line';
import { deleteProductionLine } from '../fn/production-line-controller/delete-production-line';
import { DeleteProductionLine$Params } from '../fn/production-line-controller/delete-production-line';
import { getAllProductionLines } from '../fn/production-line-controller/get-all-production-lines';
import { GetAllProductionLines$Params } from '../fn/production-line-controller/get-all-production-lines';
import { getByIds } from '../fn/production-line-controller/get-by-ids';
import { GetByIds$Params } from '../fn/production-line-controller/get-by-ids';
import { getProductionLine } from '../fn/production-line-controller/get-production-line';
import { GetProductionLine$Params } from '../fn/production-line-controller/get-production-line';
import { ProductionLineResponse } from '../models/production-line-response';
import { updateProductionLine } from '../fn/production-line-controller/update-production-line';
import { UpdateProductionLine$Params } from '../fn/production-line-controller/update-production-line';

@Injectable({ providedIn: 'root' })
export class ProductionLineControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProductionLine()` */
  static readonly GetProductionLinePath = '/api/production-lines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProductionLine()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductionLine$Response(params: GetProductionLine$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionLineResponse>> {
    return getProductionLine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProductionLine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProductionLine(params: GetProductionLine$Params, context?: HttpContext): Observable<ProductionLineResponse> {
    return this.getProductionLine$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionLineResponse>): ProductionLineResponse => r.body)
    );
  }

  /** Path part for operation `updateProductionLine()` */
  static readonly UpdateProductionLinePath = '/api/production-lines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProductionLine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProductionLine$Response(params: UpdateProductionLine$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionLineResponse>> {
    return updateProductionLine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProductionLine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProductionLine(params: UpdateProductionLine$Params, context?: HttpContext): Observable<ProductionLineResponse> {
    return this.updateProductionLine$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionLineResponse>): ProductionLineResponse => r.body)
    );
  }

  /** Path part for operation `deleteProductionLine()` */
  static readonly DeleteProductionLinePath = '/api/production-lines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProductionLine()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductionLine$Response(params: DeleteProductionLine$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteProductionLine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProductionLine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductionLine(params: DeleteProductionLine$Params, context?: HttpContext): Observable<void> {
    return this.deleteProductionLine$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllProductionLines()` */
  static readonly GetAllProductionLinesPath = '/api/production-lines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProductionLines()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProductionLines$Response(params?: GetAllProductionLines$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ProductionLineResponse>>> {
    return getAllProductionLines(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProductionLines$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProductionLines(params?: GetAllProductionLines$Params, context?: HttpContext): Observable<Array<ProductionLineResponse>> {
    return this.getAllProductionLines$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductionLineResponse>>): Array<ProductionLineResponse> => r.body)
    );
  }

  /** Path part for operation `createProductionLine()` */
  static readonly CreateProductionLinePath = '/api/production-lines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProductionLine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProductionLine$Response(params: CreateProductionLine$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductionLineResponse>> {
    return createProductionLine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProductionLine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProductionLine(params: CreateProductionLine$Params, context?: HttpContext): Observable<ProductionLineResponse> {
    return this.createProductionLine$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductionLineResponse>): ProductionLineResponse => r.body)
    );
  }

  /** Path part for operation `getByIds()` */
  static readonly GetByIdsPath = '/api/production-lines/getByIds';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByIds()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIds$Response(params: GetByIds$Params, context?: HttpContext):Observable<StrictHttpResponse<Array<ProductionLineResponse>>> {
    return getByIds(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByIds$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByIds(params: GetByIds$Params, context?: HttpContext):Observable<Array<ProductionLineResponse>> {
    return this.getByIds$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ProductionLineResponse>>): Array<ProductionLineResponse> => r.body)
    );
  }

}
