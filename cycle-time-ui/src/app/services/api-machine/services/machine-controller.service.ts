/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMachine } from '../fn/machine-controller/create-machine';
import { CreateMachine$Params } from '../fn/machine-controller/create-machine';
import { deleteMachine } from '../fn/machine-controller/delete-machine';
import { DeleteMachine$Params } from '../fn/machine-controller/delete-machine';
import { getAllMachines } from '../fn/machine-controller/get-all-machines';
import { GetAllMachines$Params } from '../fn/machine-controller/get-all-machines';
import { getMachine } from '../fn/machine-controller/get-machine';
import { GetMachine$Params } from '../fn/machine-controller/get-machine';
import { MachineResponse } from '../models/machine-response';
import { updateMachine } from '../fn/machine-controller/update-machine';
import { UpdateMachine$Params } from '../fn/machine-controller/update-machine';

@Injectable({ providedIn: 'root' })
export class MachineControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMachine()` */
  static readonly GetMachinePath = '/api/machines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMachine()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMachine$Response(params: GetMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<MachineResponse>> {
    return getMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMachine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMachine(params: GetMachine$Params, context?: HttpContext): Observable<MachineResponse> {
    return this.getMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<MachineResponse>): MachineResponse => r.body)
    );
  }

  /** Path part for operation `updateMachine()` */
  static readonly UpdateMachinePath = '/api/machines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMachine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMachine$Response(params: UpdateMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<MachineResponse>> {
    return updateMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMachine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMachine(params: UpdateMachine$Params, context?: HttpContext): Observable<MachineResponse> {
    return this.updateMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<MachineResponse>): MachineResponse => r.body)
    );
  }

  /** Path part for operation `deleteMachine()` */
  static readonly DeleteMachinePath = '/api/machines/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMachine()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMachine$Response(params: DeleteMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMachine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMachine(params: DeleteMachine$Params, context?: HttpContext): Observable<void> {
    return this.deleteMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllMachines()` */
  static readonly GetAllMachinesPath = '/api/machines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMachines()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMachines$Response(params?: GetAllMachines$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<MachineResponse>>> {
    return getAllMachines(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMachines$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMachines(params?: GetAllMachines$Params, context?: HttpContext): Observable<Array<MachineResponse>> {
    return this.getAllMachines$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<MachineResponse>>): Array<MachineResponse> => r.body)
    );
  }

  /** Path part for operation `createMachine()` */
  static readonly CreateMachinePath = '/api/machines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMachine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMachine$Response(params: CreateMachine$Params, context?: HttpContext): Observable<StrictHttpResponse<MachineResponse>> {
    return createMachine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMachine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMachine(params: CreateMachine$Params, context?: HttpContext): Observable<MachineResponse> {
    return this.createMachine$Response(params, context).pipe(
      map((r: StrictHttpResponse<MachineResponse>): MachineResponse => r.body)
    );
  }

}
